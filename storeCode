"use client";
import { useEffect, useState } from "react";
import { getSession } from "next-auth/react";
import Title from "@/components/Title";
import Image from "next/image";
import { FaCamera } from "react-icons/fa6";

export default function Page() {
  const [session, setSession] = useState(null);
  const [patients, setPatients] = useState([]);
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: { vill: "", policeStation: "", district: "", division: "" },
  });

  useEffect(() => {
    const fetchData = async () => {
      const sessionData = await getSession();
      setSession(sessionData);

      const response = await fetch("/api/patients");
      const patientsData = await response.json();
      setPatients(patientsData);
    };
    fetchData();
  }, []);

  const logedinPatient = patients.find(
    (patient) => patient._id === session?.user?.id
  );

  useEffect(() => {
    if (logedinPatient) {
      setFormData({
        name: logedinPatient.name || "",
        phone: logedinPatient.phone || "",
        address: logedinPatient.address || {
          vill: "",
          policeStation: "",
          district: "",
          division: "",
        },
      });
    }
  }, [logedinPatient]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    if (["vill", "policeStation", "district", "division"].includes(name)) {
      setFormData((prev) => ({
        ...prev,
        address: {
          ...prev.address,
          [name]: value,
        },
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleUpdate = async () => {
    const res = await fetch(`/api/patients/${session?.user?.id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData),
    });

    if (res.ok) {
      alert("Updated successfully!");
      setEditMode(false);
    } else {
      alert("Failed to update");
    }
  };

  const handleDelete = async () => {
    const confirmDelete = confirm(
      "Are you sure you want to delete your account?"
    );
    if (!confirmDelete) return;

    const res = await fetch(`/api/patients/${session?.user?.id}`, {
      method: "DELETE",
    });

    if (res.ok) {
      alert("Account deleted.");
      window.location.href = "/logout"; // Or redirect to homepage
    } else {
      alert("Failed to delete account.");
    }
  };

  return (
    <div className="w-9/10 mx-auto py-20">
      <Title title={"Profile Setting"} className="text-blue-950 text-2xl" />

      <div className="mt-10 py-16 px-20 bg-gray-200 rounded-2xl">
        <div className="relative bg-red-700 w-fit rounded-full overflow-hidden group">
          <Image
            src={logedinPatient?.image || "/default.png"}
            alt={logedinPatient?.name || "User image"}
            width={250}
            height={300}
            className="object-cover rounded-full"
          />
          <div className="w-full bg-[#000b] h-2/5 absolute bottom-0 translate-y-full left-0 flex justify-center items-center group-hover:translate-y-0 transition-all duration-200 ease-in  group/overlay cursor-pointer">
            <FaCamera className="text-3xl text-white transition-all duration-200 ease-in group-hover/overlay:text-4xl" />
          </div>
        </div>

        {editMode ? (
          <>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className="mt-4 block border p-2 rounded w-full"
              placeholder="Name"
            />
            <input
              type="text"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              className="mt-2 block border p-2 rounded w-full"
              placeholder="Phone"
            />
            <div className="grid grid-cols-2 gap-2 mt-2">
              {["vill", "policeStation", "district", "division"].map(
                (field) => (
                  <input
                    key={field}
                    type="text"
                    name={field}
                    value={formData.address[field]}
                    onChange={handleChange}
                    className="border p-2 rounded"
                    placeholder={field}
                  />
                )
              )}
            </div>
            <button
              onClick={handleUpdate}
              className="mt-4 px-5 py-3 bg-blue-600 text-white rounded cursor-pointer"
            >
              Save Changes
            </button>
          </>
        ) : (
          <>
            <h2 className="text-3xl font-semibold text-blue-950 mt-5">
              {logedinPatient?.name}
            </h2>
            <span className="text-xl leading-8 tracking-wide">
              {logedinPatient?.phone}
            </span>
            <address className="flex flex-col text-lg text-gray-800 mt-2">
              <p>Village: {logedinPatient?.address?.vill || "N/A"}</p>
              <p>
                Police Station:{" "}
                {logedinPatient?.address?.policeStation || "N/A"}
              </p>
              <p>District: {logedinPatient?.address?.district || "N/A"}</p>
              <p>Division: {logedinPatient?.address?.division || "N/A"}</p>
            </address>
          </>
        )}

        <div className="mt-10 flex gap-4">
          <button
            className="px-5 py-3 bg-blue-950 text-white rounded-lg cursor-pointer"
            onClick={() => setEditMode((prev) => !prev)}
          >
            {editMode ? "Cancel" : "Edit Profile"}
          </button>
          <button
            className="px-5 py-3 bg-red-600 text-white rounded-lg"
            onClick={handleDelete}
          >
            Delete Account Permanently
          </button>
        </div>
      </div>
    </div>
  );
}
